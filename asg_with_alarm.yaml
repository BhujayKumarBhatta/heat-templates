heat_template_version: 2014-10-16  
description: A simple auto scaling group.  
resources:  
  group:
    type: OS::Heat::AutoScalingGroup
    properties:
      cooldown: 60
      desired_capacity: 2
      max_size: 5
      min_size: 1
      resource:
        type: OS::Nova::Server::Cirros

  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: group }
      cooldown: 60
      scaling_adjustment: 1

#  cpu_alarm_high:
#    type: OS::Ceilometer::Alarm
#    properties:
#      meter_name: cpu_util
#      statistic: avg
#      period: 60
#      evaluation_periods: 1
#      threshold: 50
#      alarm_actions:
#        - {get_attr: [scaleup_policy, alarm_url]}
#      comparison_operator: gt
  cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 80%
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 80
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - {get_attr: [scaleup_policy, alarm_url]}
#        - str_replace:
#            template: trust+url
#            params:
#              url: {get_attr: [scaleup_policy, signal_url]}
#      query:
#        list_join:
#          - ''
#          - - {'=': {server_group: {get_param: "OS::stack_id"}}} 
#outputs:
#  
#  gnocchi_query:
#    value:
#      str_replace:
#        template: >
#          gnocchi measures aggregation --resource-type instance
#          --query 'server_group="stackval"'
#          --granularity 300 --aggregation mean -m cpu_util
#        params:
#          stackval: { get_param: "OS::stack_id" }
#    description: >
#      This is a Gnocchi query for statistics on the cpu_util measurements about
#      OS::Nova::Server instances in this stack. The --resource-type select the
#      type of Gnocchi resource. The --query parameter filters resources
#      according to its attributes. When a VM's metadata includes an item of the
#      form metering.server_group=X, the corresponding Gnocchi resource has a
#      attribute named server_group that can queried with 'server_group="X"' In
#      this case the nested stacks give their VMs metadata that is passed as a
#      nested stack parameter, and this stack passes a metadata of the form
#      metering.server_group=X, where X is this stack's ID.